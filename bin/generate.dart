import 'dart:async' as async;
import 'dart:convert' as convert;
import 'dart:io' as io;

final Map<String, Set<Type>> generate = {
	'async': {
		async.Future,
		async.Completer,
		async.Stream,
		async.StreamSubscription,
		async.EventSink,
		async.StreamConsumer,
		async.StreamSink,
		async.StreamTransformer,
		async.StreamTransformerBase,
		async.StreamIterator,
		async.MultiStreamController,
		async.StreamController,
		async.SynchronousStreamController,
		async.Timer,
		async.ZoneSpecification,
		async.ZoneDelegate,
		async.Zone,
	},
	'convert': {
		convert.ByteConversionSink,
		convert.ByteConversionSinkBase,
		convert.ChunkedConversionSink,
		convert.Codec,
		convert.Converter,
		convert.Encoding,
		convert.StringConversionSink,
		convert.ClosableStringSink,
		convert.StringConversionSinkBase,
		convert.StringConversionSinkMixin,
	},
	'io': {
		io.IOException,
		io.ZLibOption,
		io.RawZLibFilter,
		io.Directory,
		io.File,
		io.RandomAccessFile,
		io.FileSystemEntity,
		io.IOSink,
		io.Link,
		io.IOOverrides,
		io.Process,
		io.SecureSocket,
		io.RawSecureSocket,
		io.X509Certificate,
		io.SecurityContext,
		io.InternetAddress,
		io.NetworkInterface,
		io.RawServerSocket,
		io.ServerSocket,
		io.RawSocket,
		io.Socket,
		io.ResourceHandle,
		io.SocketControlMessage,
		io.RawDatagramSocket,
		io.RawSynchronousSocket,
	},
};
